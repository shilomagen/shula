/* tslint:disable */
/* eslint-disable */
/**
 * Shula API
 * API documentation for the Shula application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateManyConsentRecords201Response } from '../models';
// @ts-ignore
import type { CreateParticipantConsentDto } from '../models';
// @ts-ignore
import type { GroupConsentStatusResponseDto } from '../models';
// @ts-ignore
import type { ParticipantConsentResponseDto } from '../models';
// @ts-ignore
import type { ParticipantsConsentStatusResponseDto } from '../models';
// @ts-ignore
import type { UpdateParticipantConsentDto } from '../models';
/**
 * ParticipantConsentsApi - axios parameter creator
 * @export
 */
export const ParticipantConsentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new consent record for a participant in a group
         * @summary Create consent record
         * @param {CreateParticipantConsentDto} createParticipantConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsentRecord: async (createParticipantConsentDto: CreateParticipantConsentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createParticipantConsentDto' is not null or undefined
            assertParamExists('createConsentRecord', 'createParticipantConsentDto', createParticipantConsentDto)
            const localVarPath = `/api/v1/participant-consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParticipantConsentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create multiple consent records for participants in a group
         * @summary Create multiple consent records
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyConsentRecords: async (requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('createManyConsentRecords', 'requestBody', requestBody)
            const localVarPath = `/api/v1/participant-consents/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific consent record by group and participant IDs
         * @summary Get consent record
         * @param {string} groupId Group ID
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentRecord: async (groupId: string, participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getConsentRecord', 'groupId', groupId)
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('getConsentRecord', 'participantId', participantId)
            const localVarPath = `/api/v1/participant-consents/{groupId}/{participantId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all consent records for a specific group
         * @summary Get all consents for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentsByGroupId: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getConsentsByGroupId', 'groupId', groupId)
            const localVarPath = `/api/v1/participant-consents/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all consent records for a specific participant
         * @summary Get all consents for a participant
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentsByParticipantId: async (participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('getConsentsByParticipantId', 'participantId', participantId)
            const localVarPath = `/api/v1/participant-consents/participant/{participantId}`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the overall consent status for a specific group
         * @summary Get consent status for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupConsentStatus: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupConsentStatus', 'groupId', groupId)
            const localVarPath = `/api/v1/participant-consents/group/{groupId}/status`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve consent status for all participants in a specific group
         * @summary Get participants consent status for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantsConsentStatus: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getParticipantsConsentStatus', 'groupId', groupId)
            const localVarPath = `/api/v1/participant-consents/group/{groupId}/participants`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a consent record for a participant in a group
         * @summary Update consent record
         * @param {string} groupId Group ID
         * @param {string} participantId Participant ID
         * @param {UpdateParticipantConsentDto} updateParticipantConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsentRecord: async (groupId: string, participantId: string, updateParticipantConsentDto: UpdateParticipantConsentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateConsentRecord', 'groupId', groupId)
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('updateConsentRecord', 'participantId', participantId)
            // verify required parameter 'updateParticipantConsentDto' is not null or undefined
            assertParamExists('updateConsentRecord', 'updateParticipantConsentDto', updateParticipantConsentDto)
            const localVarPath = `/api/v1/participant-consents/{groupId}/{participantId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateParticipantConsentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParticipantConsentsApi - functional programming interface
 * @export
 */
export const ParticipantConsentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParticipantConsentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new consent record for a participant in a group
         * @summary Create consent record
         * @param {CreateParticipantConsentDto} createParticipantConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConsentRecord(createParticipantConsentDto: CreateParticipantConsentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantConsentResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConsentRecord(createParticipantConsentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantConsentsApi.createConsentRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create multiple consent records for participants in a group
         * @summary Create multiple consent records
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManyConsentRecords(requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyConsentRecords201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createManyConsentRecords(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantConsentsApi.createManyConsentRecords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific consent record by group and participant IDs
         * @summary Get consent record
         * @param {string} groupId Group ID
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsentRecord(groupId: string, participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantConsentResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConsentRecord(groupId, participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantConsentsApi.getConsentRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all consent records for a specific group
         * @summary Get all consents for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsentsByGroupId(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantConsentResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConsentsByGroupId(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantConsentsApi.getConsentsByGroupId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all consent records for a specific participant
         * @summary Get all consents for a participant
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsentsByParticipantId(participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantConsentResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConsentsByParticipantId(participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantConsentsApi.getConsentsByParticipantId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the overall consent status for a specific group
         * @summary Get consent status for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupConsentStatus(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupConsentStatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupConsentStatus(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantConsentsApi.getGroupConsentStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve consent status for all participants in a specific group
         * @summary Get participants consent status for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipantsConsentStatus(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsConsentStatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipantsConsentStatus(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantConsentsApi.getParticipantsConsentStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a consent record for a participant in a group
         * @summary Update consent record
         * @param {string} groupId Group ID
         * @param {string} participantId Participant ID
         * @param {UpdateParticipantConsentDto} updateParticipantConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConsentRecord(groupId: string, participantId: string, updateParticipantConsentDto: UpdateParticipantConsentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantConsentResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConsentRecord(groupId, participantId, updateParticipantConsentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantConsentsApi.updateConsentRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ParticipantConsentsApi - factory interface
 * @export
 */
export const ParticipantConsentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParticipantConsentsApiFp(configuration)
    return {
        /**
         * Create a new consent record for a participant in a group
         * @summary Create consent record
         * @param {CreateParticipantConsentDto} createParticipantConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsentRecord(createParticipantConsentDto: CreateParticipantConsentDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantConsentResponseDto> {
            return localVarFp.createConsentRecord(createParticipantConsentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Create multiple consent records for participants in a group
         * @summary Create multiple consent records
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyConsentRecords(requestBody: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<CreateManyConsentRecords201Response> {
            return localVarFp.createManyConsentRecords(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific consent record by group and participant IDs
         * @summary Get consent record
         * @param {string} groupId Group ID
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentRecord(groupId: string, participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantConsentResponseDto> {
            return localVarFp.getConsentRecord(groupId, participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all consent records for a specific group
         * @summary Get all consents for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentsByGroupId(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParticipantConsentResponseDto>> {
            return localVarFp.getConsentsByGroupId(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all consent records for a specific participant
         * @summary Get all consents for a participant
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentsByParticipantId(participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParticipantConsentResponseDto>> {
            return localVarFp.getConsentsByParticipantId(participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the overall consent status for a specific group
         * @summary Get consent status for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupConsentStatus(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupConsentStatusResponseDto> {
            return localVarFp.getGroupConsentStatus(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve consent status for all participants in a specific group
         * @summary Get participants consent status for a group
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantsConsentStatus(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsConsentStatusResponseDto> {
            return localVarFp.getParticipantsConsentStatus(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a consent record for a participant in a group
         * @summary Update consent record
         * @param {string} groupId Group ID
         * @param {string} participantId Participant ID
         * @param {UpdateParticipantConsentDto} updateParticipantConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsentRecord(groupId: string, participantId: string, updateParticipantConsentDto: UpdateParticipantConsentDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantConsentResponseDto> {
            return localVarFp.updateConsentRecord(groupId, participantId, updateParticipantConsentDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParticipantConsentsApi - interface
 * @export
 * @interface ParticipantConsentsApi
 */
export interface ParticipantConsentsApiInterface {
    /**
     * Create a new consent record for a participant in a group
     * @summary Create consent record
     * @param {CreateParticipantConsentDto} createParticipantConsentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApiInterface
     */
    createConsentRecord(createParticipantConsentDto: CreateParticipantConsentDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantConsentResponseDto>;

    /**
     * Create multiple consent records for participants in a group
     * @summary Create multiple consent records
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApiInterface
     */
    createManyConsentRecords(requestBody: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<CreateManyConsentRecords201Response>;

    /**
     * Retrieve a specific consent record by group and participant IDs
     * @summary Get consent record
     * @param {string} groupId Group ID
     * @param {string} participantId Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApiInterface
     */
    getConsentRecord(groupId: string, participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantConsentResponseDto>;

    /**
     * Retrieve all consent records for a specific group
     * @summary Get all consents for a group
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApiInterface
     */
    getConsentsByGroupId(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParticipantConsentResponseDto>>;

    /**
     * Retrieve all consent records for a specific participant
     * @summary Get all consents for a participant
     * @param {string} participantId Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApiInterface
     */
    getConsentsByParticipantId(participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParticipantConsentResponseDto>>;

    /**
     * Retrieve the overall consent status for a specific group
     * @summary Get consent status for a group
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApiInterface
     */
    getGroupConsentStatus(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupConsentStatusResponseDto>;

    /**
     * Retrieve consent status for all participants in a specific group
     * @summary Get participants consent status for a group
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApiInterface
     */
    getParticipantsConsentStatus(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsConsentStatusResponseDto>;

    /**
     * Update a consent record for a participant in a group
     * @summary Update consent record
     * @param {string} groupId Group ID
     * @param {string} participantId Participant ID
     * @param {UpdateParticipantConsentDto} updateParticipantConsentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApiInterface
     */
    updateConsentRecord(groupId: string, participantId: string, updateParticipantConsentDto: UpdateParticipantConsentDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantConsentResponseDto>;

}

/**
 * ParticipantConsentsApi - object-oriented interface
 * @export
 * @class ParticipantConsentsApi
 * @extends {BaseAPI}
 */
export class ParticipantConsentsApi extends BaseAPI implements ParticipantConsentsApiInterface {
    /**
     * Create a new consent record for a participant in a group
     * @summary Create consent record
     * @param {CreateParticipantConsentDto} createParticipantConsentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApi
     */
    public createConsentRecord(createParticipantConsentDto: CreateParticipantConsentDto, options?: RawAxiosRequestConfig) {
        return ParticipantConsentsApiFp(this.configuration).createConsentRecord(createParticipantConsentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create multiple consent records for participants in a group
     * @summary Create multiple consent records
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApi
     */
    public createManyConsentRecords(requestBody: Array<string>, options?: RawAxiosRequestConfig) {
        return ParticipantConsentsApiFp(this.configuration).createManyConsentRecords(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific consent record by group and participant IDs
     * @summary Get consent record
     * @param {string} groupId Group ID
     * @param {string} participantId Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApi
     */
    public getConsentRecord(groupId: string, participantId: string, options?: RawAxiosRequestConfig) {
        return ParticipantConsentsApiFp(this.configuration).getConsentRecord(groupId, participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all consent records for a specific group
     * @summary Get all consents for a group
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApi
     */
    public getConsentsByGroupId(groupId: string, options?: RawAxiosRequestConfig) {
        return ParticipantConsentsApiFp(this.configuration).getConsentsByGroupId(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all consent records for a specific participant
     * @summary Get all consents for a participant
     * @param {string} participantId Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApi
     */
    public getConsentsByParticipantId(participantId: string, options?: RawAxiosRequestConfig) {
        return ParticipantConsentsApiFp(this.configuration).getConsentsByParticipantId(participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the overall consent status for a specific group
     * @summary Get consent status for a group
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApi
     */
    public getGroupConsentStatus(groupId: string, options?: RawAxiosRequestConfig) {
        return ParticipantConsentsApiFp(this.configuration).getGroupConsentStatus(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve consent status for all participants in a specific group
     * @summary Get participants consent status for a group
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApi
     */
    public getParticipantsConsentStatus(groupId: string, options?: RawAxiosRequestConfig) {
        return ParticipantConsentsApiFp(this.configuration).getParticipantsConsentStatus(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a consent record for a participant in a group
     * @summary Update consent record
     * @param {string} groupId Group ID
     * @param {string} participantId Participant ID
     * @param {UpdateParticipantConsentDto} updateParticipantConsentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantConsentsApi
     */
    public updateConsentRecord(groupId: string, participantId: string, updateParticipantConsentDto: UpdateParticipantConsentDto, options?: RawAxiosRequestConfig) {
        return ParticipantConsentsApiFp(this.configuration).updateConsentRecord(groupId, participantId, updateParticipantConsentDto, options).then((request) => request(this.axios, this.basePath));
    }
}

