/* tslint:disable */
/* eslint-disable */
/**
 * Shula API
 * API documentation for the Shula application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConnectPerson201Response } from '../models';
// @ts-ignore
import type { ConnectPersonRequest } from '../models';
// @ts-ignore
import type { ConversationResponseDto } from '../models';
// @ts-ignore
import type { MessageResponseDto } from '../models';
// @ts-ignore
import type { PaginatedConversationsResponseDto } from '../models';
// @ts-ignore
import type { ProcessMessageRequest } from '../models';
// @ts-ignore
import type { SendMessageRequest } from '../models';
// @ts-ignore
import type { UpdateConversationDto } from '../models';
/**
 * ConversationsApi - axios parameter creator
 * @export
 */
export const ConversationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mark a conversation as abandoned
         * @summary Abandon a conversation
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonConversation: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('abandonConversation', 'id', id)
            const localVarPath = `/api/v1/conversations/{id}/abandon`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect a person using images and assign to a group
         * @summary Connect a person
         * @param {ConnectPersonRequest} connectPersonRequest Connect person data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectPerson: async (connectPersonRequest: ConnectPersonRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectPersonRequest' is not null or undefined
            assertParamExists('connectPerson', 'connectPersonRequest', connectPersonRequest)
            const localVarPath = `/api/v1/conversations/connect-person`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(connectPersonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list of conversations with optional filters
         * @summary Get all conversations with filtering options
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {string} [participantName] Filter by participant name (case-insensitive, partial match)
         * @param {string} [participantPhone] Filter by participant phone number (case-insensitive, partial match)
         * @param {string} [participantId] Filter by participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConversations: async (page?: number, size?: number, participantName?: string, participantPhone?: string, participantId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (participantName !== undefined) {
                localVarQueryParameter['participantName'] = participantName;
            }

            if (participantPhone !== undefined) {
                localVarQueryParameter['participantPhone'] = participantPhone;
            }

            if (participantId !== undefined) {
                localVarQueryParameter['participantId'] = participantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific conversation by its ID
         * @summary Get conversation by ID
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getConversationById', 'id', id)
            const localVarPath = `/api/v1/conversations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all messages for a specific conversation
         * @summary Get messages for a conversation
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationMessages: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getConversationMessages', 'id', id)
            const localVarPath = `/api/v1/conversations/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all conversations for a specific participant
         * @summary Get conversations for a participant
         * @param {string} participantId ID of the participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsByParticipantId: async (participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('getConversationsByParticipantId', 'participantId', participantId)
            const localVarPath = `/api/v1/conversations/participant/{participantId}`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Process an incoming message and create or update a conversation
         * @summary Process an incoming message
         * @param {ProcessMessageRequest} processMessageRequest Message data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processMessage: async (processMessageRequest: ProcessMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processMessageRequest' is not null or undefined
            assertParamExists('processMessage', 'processMessageRequest', processMessageRequest)
            const localVarPath = `/api/v1/conversations/process-message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new outgoing message to a conversation
         * @summary Send a message to a conversation
         * @param {string} id Conversation ID
         * @param {SendMessageRequest} sendMessageRequest Message data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (id: string, sendMessageRequest: SendMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sendMessage', 'id', id)
            // verify required parameter 'sendMessageRequest' is not null or undefined
            assertParamExists('sendMessage', 'sendMessageRequest', sendMessageRequest)
            const localVarPath = `/api/v1/conversations/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a conversation with current node, metadata, or status
         * @summary Update a conversation
         * @param {string} id Conversation ID
         * @param {UpdateConversationDto} updateConversationDto Update conversation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversation: async (id: string, updateConversationDto: UpdateConversationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateConversation', 'id', id)
            // verify required parameter 'updateConversationDto' is not null or undefined
            assertParamExists('updateConversation', 'updateConversationDto', updateConversationDto)
            const localVarPath = `/api/v1/conversations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateConversationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversationsApi - functional programming interface
 * @export
 */
export const ConversationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConversationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Mark a conversation as abandoned
         * @summary Abandon a conversation
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abandonConversation(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abandonConversation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.abandonConversation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Connect a person using images and assign to a group
         * @summary Connect a person
         * @param {ConnectPersonRequest} connectPersonRequest Connect person data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectPerson(connectPersonRequest: ConnectPersonRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectPerson201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectPerson(connectPersonRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.connectPerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a paginated list of conversations with optional filters
         * @summary Get all conversations with filtering options
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {string} [participantName] Filter by participant name (case-insensitive, partial match)
         * @param {string} [participantPhone] Filter by participant phone number (case-insensitive, partial match)
         * @param {string} [participantId] Filter by participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllConversations(page?: number, size?: number, participantName?: string, participantPhone?: string, participantId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedConversationsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllConversations(page, size, participantName, participantPhone, participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.getAllConversations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific conversation by its ID
         * @summary Get conversation by ID
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.getConversationById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all messages for a specific conversation
         * @summary Get messages for a conversation
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationMessages(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationMessages(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.getConversationMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all conversations for a specific participant
         * @summary Get conversations for a participant
         * @param {string} participantId ID of the participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationsByParticipantId(participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationsByParticipantId(participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.getConversationsByParticipantId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Process an incoming message and create or update a conversation
         * @summary Process an incoming message
         * @param {ProcessMessageRequest} processMessageRequest Message data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processMessage(processMessageRequest: ProcessMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processMessage(processMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.processMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a new outgoing message to a conversation
         * @summary Send a message to a conversation
         * @param {string} id Conversation ID
         * @param {SendMessageRequest} sendMessageRequest Message data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(id: string, sendMessageRequest: SendMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessage(id, sendMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.sendMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a conversation with current node, metadata, or status
         * @summary Update a conversation
         * @param {string} id Conversation ID
         * @param {UpdateConversationDto} updateConversationDto Update conversation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConversation(id: string, updateConversationDto: UpdateConversationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConversation(id, updateConversationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationsApi.updateConversation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConversationsApi - factory interface
 * @export
 */
export const ConversationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConversationsApiFp(configuration)
    return {
        /**
         * Mark a conversation as abandoned
         * @summary Abandon a conversation
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonConversation(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponseDto> {
            return localVarFp.abandonConversation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Connect a person using images and assign to a group
         * @summary Connect a person
         * @param {ConnectPersonRequest} connectPersonRequest Connect person data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectPerson(connectPersonRequest: ConnectPersonRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectPerson201Response> {
            return localVarFp.connectPerson(connectPersonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list of conversations with optional filters
         * @summary Get all conversations with filtering options
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {string} [participantName] Filter by participant name (case-insensitive, partial match)
         * @param {string} [participantPhone] Filter by participant phone number (case-insensitive, partial match)
         * @param {string} [participantId] Filter by participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConversations(page?: number, size?: number, participantName?: string, participantPhone?: string, participantId?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedConversationsResponseDto> {
            return localVarFp.getAllConversations(page, size, participantName, participantPhone, participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific conversation by its ID
         * @summary Get conversation by ID
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponseDto> {
            return localVarFp.getConversationById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all messages for a specific conversation
         * @summary Get messages for a conversation
         * @param {string} id Conversation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationMessages(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MessageResponseDto>> {
            return localVarFp.getConversationMessages(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all conversations for a specific participant
         * @summary Get conversations for a participant
         * @param {string} participantId ID of the participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsByParticipantId(participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ConversationResponseDto>> {
            return localVarFp.getConversationsByParticipantId(participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Process an incoming message and create or update a conversation
         * @summary Process an incoming message
         * @param {ProcessMessageRequest} processMessageRequest Message data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processMessage(processMessageRequest: ProcessMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponseDto> {
            return localVarFp.processMessage(processMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new outgoing message to a conversation
         * @summary Send a message to a conversation
         * @param {string} id Conversation ID
         * @param {SendMessageRequest} sendMessageRequest Message data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(id: string, sendMessageRequest: SendMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDto> {
            return localVarFp.sendMessage(id, sendMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a conversation with current node, metadata, or status
         * @summary Update a conversation
         * @param {string} id Conversation ID
         * @param {UpdateConversationDto} updateConversationDto Update conversation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversation(id: string, updateConversationDto: UpdateConversationDto, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponseDto> {
            return localVarFp.updateConversation(id, updateConversationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConversationsApi - interface
 * @export
 * @interface ConversationsApi
 */
export interface ConversationsApiInterface {
    /**
     * Mark a conversation as abandoned
     * @summary Abandon a conversation
     * @param {string} id Conversation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    abandonConversation(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponseDto>;

    /**
     * Connect a person using images and assign to a group
     * @summary Connect a person
     * @param {ConnectPersonRequest} connectPersonRequest Connect person data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    connectPerson(connectPersonRequest: ConnectPersonRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectPerson201Response>;

    /**
     * Retrieve a paginated list of conversations with optional filters
     * @summary Get all conversations with filtering options
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [size] Number of items per page
     * @param {string} [participantName] Filter by participant name (case-insensitive, partial match)
     * @param {string} [participantPhone] Filter by participant phone number (case-insensitive, partial match)
     * @param {string} [participantId] Filter by participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    getAllConversations(page?: number, size?: number, participantName?: string, participantPhone?: string, participantId?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedConversationsResponseDto>;

    /**
     * Retrieve a specific conversation by its ID
     * @summary Get conversation by ID
     * @param {string} id Conversation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    getConversationById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponseDto>;

    /**
     * Retrieve all messages for a specific conversation
     * @summary Get messages for a conversation
     * @param {string} id Conversation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    getConversationMessages(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MessageResponseDto>>;

    /**
     * Retrieve all conversations for a specific participant
     * @summary Get conversations for a participant
     * @param {string} participantId ID of the participant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    getConversationsByParticipantId(participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ConversationResponseDto>>;

    /**
     * Process an incoming message and create or update a conversation
     * @summary Process an incoming message
     * @param {ProcessMessageRequest} processMessageRequest Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    processMessage(processMessageRequest: ProcessMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponseDto>;

    /**
     * Add a new outgoing message to a conversation
     * @summary Send a message to a conversation
     * @param {string} id Conversation ID
     * @param {SendMessageRequest} sendMessageRequest Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    sendMessage(id: string, sendMessageRequest: SendMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageResponseDto>;

    /**
     * Update a conversation with current node, metadata, or status
     * @summary Update a conversation
     * @param {string} id Conversation ID
     * @param {UpdateConversationDto} updateConversationDto Update conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApiInterface
     */
    updateConversation(id: string, updateConversationDto: UpdateConversationDto, options?: RawAxiosRequestConfig): AxiosPromise<ConversationResponseDto>;

}

/**
 * ConversationsApi - object-oriented interface
 * @export
 * @class ConversationsApi
 * @extends {BaseAPI}
 */
export class ConversationsApi extends BaseAPI implements ConversationsApiInterface {
    /**
     * Mark a conversation as abandoned
     * @summary Abandon a conversation
     * @param {string} id Conversation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public abandonConversation(id: string, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).abandonConversation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Connect a person using images and assign to a group
     * @summary Connect a person
     * @param {ConnectPersonRequest} connectPersonRequest Connect person data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public connectPerson(connectPersonRequest: ConnectPersonRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).connectPerson(connectPersonRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a paginated list of conversations with optional filters
     * @summary Get all conversations with filtering options
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [size] Number of items per page
     * @param {string} [participantName] Filter by participant name (case-insensitive, partial match)
     * @param {string} [participantPhone] Filter by participant phone number (case-insensitive, partial match)
     * @param {string} [participantId] Filter by participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getAllConversations(page?: number, size?: number, participantName?: string, participantPhone?: string, participantId?: string, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getAllConversations(page, size, participantName, participantPhone, participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific conversation by its ID
     * @summary Get conversation by ID
     * @param {string} id Conversation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getConversationById(id: string, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getConversationById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all messages for a specific conversation
     * @summary Get messages for a conversation
     * @param {string} id Conversation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getConversationMessages(id: string, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getConversationMessages(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all conversations for a specific participant
     * @summary Get conversations for a participant
     * @param {string} participantId ID of the participant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getConversationsByParticipantId(participantId: string, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getConversationsByParticipantId(participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Process an incoming message and create or update a conversation
     * @summary Process an incoming message
     * @param {ProcessMessageRequest} processMessageRequest Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public processMessage(processMessageRequest: ProcessMessageRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).processMessage(processMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new outgoing message to a conversation
     * @summary Send a message to a conversation
     * @param {string} id Conversation ID
     * @param {SendMessageRequest} sendMessageRequest Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public sendMessage(id: string, sendMessageRequest: SendMessageRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).sendMessage(id, sendMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a conversation with current node, metadata, or status
     * @summary Update a conversation
     * @param {string} id Conversation ID
     * @param {UpdateConversationDto} updateConversationDto Update conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public updateConversation(id: string, updateConversationDto: UpdateConversationDto, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).updateConversation(id, updateConversationDto, options).then((request) => request(this.axios, this.basePath));
    }
}

