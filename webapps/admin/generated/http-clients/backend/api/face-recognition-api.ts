/* tslint:disable */
/* eslint-disable */
/**
 * Shula API
 * API documentation for the Shula application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DetectFacesDto } from '../models';
// @ts-ignore
import type { ExtractFacesResponseDto } from '../models';
// @ts-ignore
import type { RecognizeFaceDto } from '../models';
// @ts-ignore
import type { RecognizeFaceResponseDto } from '../models';
/**
 * FaceRecognitionApi - axios parameter creator
 * @export
 */
export const FaceRecognitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns extracted faces with bounding boxes, confidence scores, and full face details from AWS Rekognition
         * @summary Extract faces from an image with detailed information
         * @param {DetectFacesDto} detectFacesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractFaces: async (detectFacesDto: DetectFacesDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'detectFacesDto' is not null or undefined
            assertParamExists('extractFaces', 'detectFacesDto', detectFacesDto)
            const localVarPath = `/api/v1/face-recognition/extract-faces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(detectFacesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Recognizes a single cropped face against a group (collection)
         * @summary Recognize a single face
         * @param {RecognizeFaceDto} recognizeFaceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recognizeFace: async (recognizeFaceDto: RecognizeFaceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recognizeFaceDto' is not null or undefined
            assertParamExists('recognizeFace', 'recognizeFaceDto', recognizeFaceDto)
            const localVarPath = `/api/v1/face-recognition/recognize-face`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recognizeFaceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaceRecognitionApi - functional programming interface
 * @export
 */
export const FaceRecognitionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaceRecognitionApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns extracted faces with bounding boxes, confidence scores, and full face details from AWS Rekognition
         * @summary Extract faces from an image with detailed information
         * @param {DetectFacesDto} detectFacesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extractFaces(detectFacesDto: DetectFacesDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtractFacesResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extractFaces(detectFacesDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaceRecognitionApi.extractFaces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Recognizes a single cropped face against a group (collection)
         * @summary Recognize a single face
         * @param {RecognizeFaceDto} recognizeFaceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recognizeFace(recognizeFaceDto: RecognizeFaceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecognizeFaceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recognizeFace(recognizeFaceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FaceRecognitionApi.recognizeFace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FaceRecognitionApi - factory interface
 * @export
 */
export const FaceRecognitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FaceRecognitionApiFp(configuration)
    return {
        /**
         * Returns extracted faces with bounding boxes, confidence scores, and full face details from AWS Rekognition
         * @summary Extract faces from an image with detailed information
         * @param {DetectFacesDto} detectFacesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractFaces(detectFacesDto: DetectFacesDto, options?: RawAxiosRequestConfig): AxiosPromise<ExtractFacesResponseDto> {
            return localVarFp.extractFaces(detectFacesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Recognizes a single cropped face against a group (collection)
         * @summary Recognize a single face
         * @param {RecognizeFaceDto} recognizeFaceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recognizeFace(recognizeFaceDto: RecognizeFaceDto, options?: RawAxiosRequestConfig): AxiosPromise<RecognizeFaceResponseDto> {
            return localVarFp.recognizeFace(recognizeFaceDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FaceRecognitionApi - interface
 * @export
 * @interface FaceRecognitionApi
 */
export interface FaceRecognitionApiInterface {
    /**
     * Returns extracted faces with bounding boxes, confidence scores, and full face details from AWS Rekognition
     * @summary Extract faces from an image with detailed information
     * @param {DetectFacesDto} detectFacesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceRecognitionApiInterface
     */
    extractFaces(detectFacesDto: DetectFacesDto, options?: RawAxiosRequestConfig): AxiosPromise<ExtractFacesResponseDto>;

    /**
     * Recognizes a single cropped face against a group (collection)
     * @summary Recognize a single face
     * @param {RecognizeFaceDto} recognizeFaceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceRecognitionApiInterface
     */
    recognizeFace(recognizeFaceDto: RecognizeFaceDto, options?: RawAxiosRequestConfig): AxiosPromise<RecognizeFaceResponseDto>;

}

/**
 * FaceRecognitionApi - object-oriented interface
 * @export
 * @class FaceRecognitionApi
 * @extends {BaseAPI}
 */
export class FaceRecognitionApi extends BaseAPI implements FaceRecognitionApiInterface {
    /**
     * Returns extracted faces with bounding boxes, confidence scores, and full face details from AWS Rekognition
     * @summary Extract faces from an image with detailed information
     * @param {DetectFacesDto} detectFacesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceRecognitionApi
     */
    public extractFaces(detectFacesDto: DetectFacesDto, options?: RawAxiosRequestConfig) {
        return FaceRecognitionApiFp(this.configuration).extractFaces(detectFacesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Recognizes a single cropped face against a group (collection)
     * @summary Recognize a single face
     * @param {RecognizeFaceDto} recognizeFaceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceRecognitionApi
     */
    public recognizeFace(recognizeFaceDto: RecognizeFaceDto, options?: RawAxiosRequestConfig) {
        return FaceRecognitionApiFp(this.configuration).recognizeFace(recognizeFaceDto, options).then((request) => request(this.axios, this.basePath));
    }
}

