/* tslint:disable */
/* eslint-disable */
/**
 * Shula API
 * API documentation for the Shula application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GroupLogsResponseDto } from '../models';
// @ts-ignore
import type { GroupMediaCountResponseDto } from '../models';
// @ts-ignore
import type { GroupMessagesCountResponseDto } from '../models';
// @ts-ignore
import type { GroupMetricsResponseDto } from '../models';
/**
 * GroupMetricsApi - axios parameter creator
 * @export
 */
export const GroupMetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Count media processed for a group within a date range
         * @param {string} groupId The group ID
         * @param {string} [startDate] The start date (YYYY-MM-DD)
         * @param {string} [endDate] The end date (YYYY-MM-DD)
         * @param {CountMediaProcessedMediaTypeEnum} [mediaType] Media type filter (IMAGE, VIDEO, DOCUMENT, AUDIO)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countMediaProcessed: async (groupId: string, startDate?: string, endDate?: string, mediaType?: CountMediaProcessedMediaTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('countMediaProcessed', 'groupId', groupId)
            const localVarPath = `/api/group-metrics/{groupId}/media`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (mediaType !== undefined) {
                localVarQueryParameter['mediaType'] = mediaType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Count messages processed for a group within a date range
         * @param {string} groupId The group ID
         * @param {string} [startDate] The start date (YYYY-MM-DD)
         * @param {string} [endDate] The end date (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countMessagesProcessed: async (groupId: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('countMessagesProcessed', 'groupId', groupId)
            const localVarPath = `/api/group-metrics/{groupId}/messages`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get logs for a specific group with optional filters
         * @summary Get group logs
         * @param {string} groupId Group ID
         * @param {string} [endDate] End date for filtering (ISO format)
         * @param {string} [startDate] Start date for filtering (ISO format)
         * @param {GetGroupLogsMediaTypeEnum} [mediaType] Filter by media type
         * @param {GetGroupLogsEventTypeEnum} [eventType] Filter by event type
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupLogs: async (groupId: string, endDate?: string, startDate?: string, mediaType?: GetGroupLogsMediaTypeEnum, eventType?: GetGroupLogsEventTypeEnum, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupLogs', 'groupId', groupId)
            const localVarPath = `/api/group-metrics/{groupId}/logs`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (mediaType !== undefined) {
                localVarQueryParameter['mediaType'] = mediaType;
            }

            if (eventType !== undefined) {
                localVarQueryParameter['eventType'] = eventType;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get media count statistics for a specific group
         * @summary Get group media count
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMediaCount: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupMediaCount', 'groupId', groupId)
            const localVarPath = `/api/group-metrics/{groupId}/media/count`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get message count statistics for a specific group
         * @summary Get group message count
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMessagesCount: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupMessagesCount', 'groupId', groupId)
            const localVarPath = `/api/group-metrics/{groupId}/messages/count`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metrics for a specific group
         * @summary Get group metrics
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMetrics: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupMetrics', 'groupId', groupId)
            const localVarPath = `/api/group-metrics/{groupId}/metrics`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get metrics for a group for the current month
         * @param {string} groupId The group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMetricsForCurrentMonth: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupMetricsForCurrentMonth', 'groupId', groupId)
            const localVarPath = `/api/group-metrics/{groupId}/current-month`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get metrics for a group for a date range
         * @param {string} groupId The group ID
         * @param {string} startDate The start date (YYYY-MM-DD)
         * @param {string} endDate The end date (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMetricsForDateRange: async (groupId: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupMetricsForDateRange', 'groupId', groupId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getGroupMetricsForDateRange', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getGroupMetricsForDateRange', 'endDate', endDate)
            const localVarPath = `/api/group-metrics/{groupId}/date-range`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get metrics for a group for the last 30 days
         * @param {string} groupId The group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMetricsForLast30Days: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupMetricsForLast30Days', 'groupId', groupId)
            const localVarPath = `/api/group-metrics/{groupId}/last-30-days`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupMetricsApi - functional programming interface
 * @export
 */
export const GroupMetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupMetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Count media processed for a group within a date range
         * @param {string} groupId The group ID
         * @param {string} [startDate] The start date (YYYY-MM-DD)
         * @param {string} [endDate] The end date (YYYY-MM-DD)
         * @param {CountMediaProcessedMediaTypeEnum} [mediaType] Media type filter (IMAGE, VIDEO, DOCUMENT, AUDIO)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countMediaProcessed(groupId: string, startDate?: string, endDate?: string, mediaType?: CountMediaProcessedMediaTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMediaCountResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countMediaProcessed(groupId, startDate, endDate, mediaType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.countMediaProcessed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Count messages processed for a group within a date range
         * @param {string} groupId The group ID
         * @param {string} [startDate] The start date (YYYY-MM-DD)
         * @param {string} [endDate] The end date (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countMessagesProcessed(groupId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMessagesCountResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countMessagesProcessed(groupId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.countMessagesProcessed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get logs for a specific group with optional filters
         * @summary Get group logs
         * @param {string} groupId Group ID
         * @param {string} [endDate] End date for filtering (ISO format)
         * @param {string} [startDate] Start date for filtering (ISO format)
         * @param {GetGroupLogsMediaTypeEnum} [mediaType] Filter by media type
         * @param {GetGroupLogsEventTypeEnum} [eventType] Filter by event type
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupLogs(groupId: string, endDate?: string, startDate?: string, mediaType?: GetGroupLogsMediaTypeEnum, eventType?: GetGroupLogsEventTypeEnum, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupLogsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupLogs(groupId, endDate, startDate, mediaType, eventType, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.getGroupLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get media count statistics for a specific group
         * @summary Get group media count
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupMediaCount(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMediaCountResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupMediaCount(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.getGroupMediaCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get message count statistics for a specific group
         * @summary Get group message count
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupMessagesCount(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMessagesCountResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupMessagesCount(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.getGroupMessagesCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get metrics for a specific group
         * @summary Get group metrics
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupMetrics(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMetricsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupMetrics(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.getGroupMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get metrics for a group for the current month
         * @param {string} groupId The group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupMetricsForCurrentMonth(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMetricsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupMetricsForCurrentMonth(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.getGroupMetricsForCurrentMonth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get metrics for a group for a date range
         * @param {string} groupId The group ID
         * @param {string} startDate The start date (YYYY-MM-DD)
         * @param {string} endDate The end date (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupMetricsForDateRange(groupId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMetricsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupMetricsForDateRange(groupId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.getGroupMetricsForDateRange']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get metrics for a group for the last 30 days
         * @param {string} groupId The group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupMetricsForLast30Days(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMetricsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupMetricsForLast30Days(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupMetricsApi.getGroupMetricsForLast30Days']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupMetricsApi - factory interface
 * @export
 */
export const GroupMetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupMetricsApiFp(configuration)
    return {
        /**
         * 
         * @summary Count media processed for a group within a date range
         * @param {string} groupId The group ID
         * @param {string} [startDate] The start date (YYYY-MM-DD)
         * @param {string} [endDate] The end date (YYYY-MM-DD)
         * @param {CountMediaProcessedMediaTypeEnum} [mediaType] Media type filter (IMAGE, VIDEO, DOCUMENT, AUDIO)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countMediaProcessed(groupId: string, startDate?: string, endDate?: string, mediaType?: CountMediaProcessedMediaTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<GroupMediaCountResponseDto> {
            return localVarFp.countMediaProcessed(groupId, startDate, endDate, mediaType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Count messages processed for a group within a date range
         * @param {string} groupId The group ID
         * @param {string} [startDate] The start date (YYYY-MM-DD)
         * @param {string} [endDate] The end date (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countMessagesProcessed(groupId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMessagesCountResponseDto> {
            return localVarFp.countMessagesProcessed(groupId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get logs for a specific group with optional filters
         * @summary Get group logs
         * @param {string} groupId Group ID
         * @param {string} [endDate] End date for filtering (ISO format)
         * @param {string} [startDate] Start date for filtering (ISO format)
         * @param {GetGroupLogsMediaTypeEnum} [mediaType] Filter by media type
         * @param {GetGroupLogsEventTypeEnum} [eventType] Filter by event type
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupLogs(groupId: string, endDate?: string, startDate?: string, mediaType?: GetGroupLogsMediaTypeEnum, eventType?: GetGroupLogsEventTypeEnum, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<GroupLogsResponseDto> {
            return localVarFp.getGroupLogs(groupId, endDate, startDate, mediaType, eventType, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Get media count statistics for a specific group
         * @summary Get group media count
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMediaCount(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMediaCountResponseDto> {
            return localVarFp.getGroupMediaCount(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get message count statistics for a specific group
         * @summary Get group message count
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMessagesCount(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMessagesCountResponseDto> {
            return localVarFp.getGroupMessagesCount(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get metrics for a specific group
         * @summary Get group metrics
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMetrics(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMetricsResponseDto> {
            return localVarFp.getGroupMetrics(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get metrics for a group for the current month
         * @param {string} groupId The group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMetricsForCurrentMonth(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMetricsResponseDto> {
            return localVarFp.getGroupMetricsForCurrentMonth(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get metrics for a group for a date range
         * @param {string} groupId The group ID
         * @param {string} startDate The start date (YYYY-MM-DD)
         * @param {string} endDate The end date (YYYY-MM-DD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMetricsForDateRange(groupId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMetricsResponseDto> {
            return localVarFp.getGroupMetricsForDateRange(groupId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get metrics for a group for the last 30 days
         * @param {string} groupId The group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupMetricsForLast30Days(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMetricsResponseDto> {
            return localVarFp.getGroupMetricsForLast30Days(groupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupMetricsApi - interface
 * @export
 * @interface GroupMetricsApi
 */
export interface GroupMetricsApiInterface {
    /**
     * 
     * @summary Count media processed for a group within a date range
     * @param {string} groupId The group ID
     * @param {string} [startDate] The start date (YYYY-MM-DD)
     * @param {string} [endDate] The end date (YYYY-MM-DD)
     * @param {CountMediaProcessedMediaTypeEnum} [mediaType] Media type filter (IMAGE, VIDEO, DOCUMENT, AUDIO)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    countMediaProcessed(groupId: string, startDate?: string, endDate?: string, mediaType?: CountMediaProcessedMediaTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<GroupMediaCountResponseDto>;

    /**
     * 
     * @summary Count messages processed for a group within a date range
     * @param {string} groupId The group ID
     * @param {string} [startDate] The start date (YYYY-MM-DD)
     * @param {string} [endDate] The end date (YYYY-MM-DD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    countMessagesProcessed(groupId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMessagesCountResponseDto>;

    /**
     * Get logs for a specific group with optional filters
     * @summary Get group logs
     * @param {string} groupId Group ID
     * @param {string} [endDate] End date for filtering (ISO format)
     * @param {string} [startDate] Start date for filtering (ISO format)
     * @param {GetGroupLogsMediaTypeEnum} [mediaType] Filter by media type
     * @param {GetGroupLogsEventTypeEnum} [eventType] Filter by event type
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    getGroupLogs(groupId: string, endDate?: string, startDate?: string, mediaType?: GetGroupLogsMediaTypeEnum, eventType?: GetGroupLogsEventTypeEnum, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<GroupLogsResponseDto>;

    /**
     * Get media count statistics for a specific group
     * @summary Get group media count
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    getGroupMediaCount(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMediaCountResponseDto>;

    /**
     * Get message count statistics for a specific group
     * @summary Get group message count
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    getGroupMessagesCount(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMessagesCountResponseDto>;

    /**
     * Get metrics for a specific group
     * @summary Get group metrics
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    getGroupMetrics(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMetricsResponseDto>;

    /**
     * 
     * @summary Get metrics for a group for the current month
     * @param {string} groupId The group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    getGroupMetricsForCurrentMonth(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMetricsResponseDto>;

    /**
     * 
     * @summary Get metrics for a group for a date range
     * @param {string} groupId The group ID
     * @param {string} startDate The start date (YYYY-MM-DD)
     * @param {string} endDate The end date (YYYY-MM-DD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    getGroupMetricsForDateRange(groupId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMetricsResponseDto>;

    /**
     * 
     * @summary Get metrics for a group for the last 30 days
     * @param {string} groupId The group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApiInterface
     */
    getGroupMetricsForLast30Days(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupMetricsResponseDto>;

}

/**
 * GroupMetricsApi - object-oriented interface
 * @export
 * @class GroupMetricsApi
 * @extends {BaseAPI}
 */
export class GroupMetricsApi extends BaseAPI implements GroupMetricsApiInterface {
    /**
     * 
     * @summary Count media processed for a group within a date range
     * @param {string} groupId The group ID
     * @param {string} [startDate] The start date (YYYY-MM-DD)
     * @param {string} [endDate] The end date (YYYY-MM-DD)
     * @param {CountMediaProcessedMediaTypeEnum} [mediaType] Media type filter (IMAGE, VIDEO, DOCUMENT, AUDIO)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public countMediaProcessed(groupId: string, startDate?: string, endDate?: string, mediaType?: CountMediaProcessedMediaTypeEnum, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).countMediaProcessed(groupId, startDate, endDate, mediaType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Count messages processed for a group within a date range
     * @param {string} groupId The group ID
     * @param {string} [startDate] The start date (YYYY-MM-DD)
     * @param {string} [endDate] The end date (YYYY-MM-DD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public countMessagesProcessed(groupId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).countMessagesProcessed(groupId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get logs for a specific group with optional filters
     * @summary Get group logs
     * @param {string} groupId Group ID
     * @param {string} [endDate] End date for filtering (ISO format)
     * @param {string} [startDate] Start date for filtering (ISO format)
     * @param {GetGroupLogsMediaTypeEnum} [mediaType] Filter by media type
     * @param {GetGroupLogsEventTypeEnum} [eventType] Filter by event type
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public getGroupLogs(groupId: string, endDate?: string, startDate?: string, mediaType?: GetGroupLogsMediaTypeEnum, eventType?: GetGroupLogsEventTypeEnum, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).getGroupLogs(groupId, endDate, startDate, mediaType, eventType, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get media count statistics for a specific group
     * @summary Get group media count
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public getGroupMediaCount(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).getGroupMediaCount(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get message count statistics for a specific group
     * @summary Get group message count
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public getGroupMessagesCount(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).getGroupMessagesCount(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get metrics for a specific group
     * @summary Get group metrics
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public getGroupMetrics(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).getGroupMetrics(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get metrics for a group for the current month
     * @param {string} groupId The group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public getGroupMetricsForCurrentMonth(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).getGroupMetricsForCurrentMonth(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get metrics for a group for a date range
     * @param {string} groupId The group ID
     * @param {string} startDate The start date (YYYY-MM-DD)
     * @param {string} endDate The end date (YYYY-MM-DD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public getGroupMetricsForDateRange(groupId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).getGroupMetricsForDateRange(groupId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get metrics for a group for the last 30 days
     * @param {string} groupId The group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMetricsApi
     */
    public getGroupMetricsForLast30Days(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupMetricsApiFp(this.configuration).getGroupMetricsForLast30Days(groupId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CountMediaProcessedMediaTypeEnum = {
    Image: 'image',
    Video: 'video',
    Audio: 'audio',
    Document: 'document',
    Sticker: 'sticker',
    Location: 'location',
    Contact: 'contact'
} as const;
export type CountMediaProcessedMediaTypeEnum = typeof CountMediaProcessedMediaTypeEnum[keyof typeof CountMediaProcessedMediaTypeEnum];
/**
 * @export
 */
export const GetGroupLogsMediaTypeEnum = {
    Image: 'image',
    Video: 'video',
    Audio: 'audio',
    Document: 'document',
    Sticker: 'sticker',
    Location: 'location',
    Contact: 'contact'
} as const;
export type GetGroupLogsMediaTypeEnum = typeof GetGroupLogsMediaTypeEnum[keyof typeof GetGroupLogsMediaTypeEnum];
/**
 * @export
 */
export const GetGroupLogsEventTypeEnum = {
    MessageProcessed: 'message_processed',
    MediaProcessed: 'media_processed'
} as const;
export type GetGroupLogsEventTypeEnum = typeof GetGroupLogsEventTypeEnum[keyof typeof GetGroupLogsEventTypeEnum];
