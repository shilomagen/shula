/* tslint:disable */
/* eslint-disable */
/**
 * Shula API
 * API documentation for the Shula application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PaginatedParticipantsWithCountsResponseDto } from '../models';
// @ts-ignore
import type { ParticipantContextResponseDto } from '../models';
// @ts-ignore
import type { ParticipantsCreateDto } from '../models';
// @ts-ignore
import type { ParticipantsResponseDto } from '../models';
// @ts-ignore
import type { ParticipantsUpdateDto } from '../models';
// @ts-ignore
import type { ParticipantsUpdateStatusDto } from '../models';
/**
 * ParticipantsApi - axios parameter creator
 * @export
 */
export const ParticipantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add participant to a group
         * @param {string} id Participant ID
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParticipantToGroup: async (id: string, groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addParticipantToGroup', 'id', id)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('addParticipantToGroup', 'groupId', groupId)
            const localVarPath = `/api/v1/participants/{id}/groups/{groupId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new participant
         * @param {ParticipantsCreateDto} participantsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParticipant: async (participantsCreateDto: ParticipantsCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantsCreateDto' is not null or undefined
            assertParamExists('createParticipant', 'participantsCreateDto', participantsCreateDto)
            const localVarPath = `/api/v1/participants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(participantsCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a participant
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParticipant: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteParticipant', 'id', id)
            const localVarPath = `/api/v1/participants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all participants
         * @param {string} [groupId] Filter participants by group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParticipants: async (groupId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/participants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get participant by ID
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getParticipantById', 'id', id)
            const localVarPath = `/api/v1/participants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get participant by phone number
         * @param {string} phoneNumber Participant phone number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantByPhoneNumber: async (phoneNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('getParticipantByPhoneNumber', 'phoneNumber', phoneNumber)
            const localVarPath = `/api/v1/participants/phone/{phoneNumber}`
                .replace(`{${"phoneNumber"}}`, encodeURIComponent(String(phoneNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the context for a participant including groups and related persons
         * @summary Get participant context
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantContext: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getParticipantContext', 'id', id)
            const localVarPath = `/api/v1/participants/{id}/context`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of participants with group and person counts
         * @summary Query participants with pagination and filtering, including counts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {string} [name] Filter participants by name (case-insensitive partial match)
         * @param {string} [phoneNumber] Filter participants by phone number (partial match)
         * @param {QueryParticipantsWithCountsStatusEnum} [status] Filter participants by status (active/inactive)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryParticipantsWithCounts: async (page?: number, size?: number, name?: string, phoneNumber?: string, status?: QueryParticipantsWithCountsStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/participants/query/with-counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove participant from a group
         * @param {string} id Participant ID
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParticipantFromGroup: async (id: string, groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeParticipantFromGroup', 'id', id)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('removeParticipantFromGroup', 'groupId', groupId)
            const localVarPath = `/api/v1/participants/{id}/groups/{groupId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a participant
         * @param {string} id Participant ID
         * @param {ParticipantsUpdateDto} participantsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant: async (id: string, participantsUpdateDto: ParticipantsUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateParticipant', 'id', id)
            // verify required parameter 'participantsUpdateDto' is not null or undefined
            assertParamExists('updateParticipant', 'participantsUpdateDto', participantsUpdateDto)
            const localVarPath = `/api/v1/participants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(participantsUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update participant status
         * @param {string} id Participant ID
         * @param {ParticipantsUpdateStatusDto} participantsUpdateStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipantStatus: async (id: string, participantsUpdateStatusDto: ParticipantsUpdateStatusDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateParticipantStatus', 'id', id)
            // verify required parameter 'participantsUpdateStatusDto' is not null or undefined
            assertParamExists('updateParticipantStatus', 'participantsUpdateStatusDto', participantsUpdateStatusDto)
            const localVarPath = `/api/v1/participants/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(participantsUpdateStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParticipantsApi - functional programming interface
 * @export
 */
export const ParticipantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParticipantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add participant to a group
         * @param {string} id Participant ID
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addParticipantToGroup(id: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addParticipantToGroup(id, groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.addParticipantToGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new participant
         * @param {ParticipantsCreateDto} participantsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createParticipant(participantsCreateDto: ParticipantsCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createParticipant(participantsCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.createParticipant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a participant
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParticipant(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteParticipant(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.deleteParticipant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all participants
         * @param {string} [groupId] Filter participants by group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllParticipants(groupId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantsResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllParticipants(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.getAllParticipants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get participant by ID
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipantById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipantById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.getParticipantById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get participant by phone number
         * @param {string} phoneNumber Participant phone number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipantByPhoneNumber(phoneNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipantByPhoneNumber(phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.getParticipantByPhoneNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the context for a participant including groups and related persons
         * @summary Get participant context
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipantContext(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantContextResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipantContext(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.getParticipantContext']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a paginated list of participants with group and person counts
         * @summary Query participants with pagination and filtering, including counts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {string} [name] Filter participants by name (case-insensitive partial match)
         * @param {string} [phoneNumber] Filter participants by phone number (partial match)
         * @param {QueryParticipantsWithCountsStatusEnum} [status] Filter participants by status (active/inactive)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryParticipantsWithCounts(page?: number, size?: number, name?: string, phoneNumber?: string, status?: QueryParticipantsWithCountsStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedParticipantsWithCountsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryParticipantsWithCounts(page, size, name, phoneNumber, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.queryParticipantsWithCounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove participant from a group
         * @param {string} id Participant ID
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeParticipantFromGroup(id: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParticipantFromGroup(id, groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.removeParticipantFromGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a participant
         * @param {string} id Participant ID
         * @param {ParticipantsUpdateDto} participantsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateParticipant(id: string, participantsUpdateDto: ParticipantsUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateParticipant(id, participantsUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.updateParticipant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update participant status
         * @param {string} id Participant ID
         * @param {ParticipantsUpdateStatusDto} participantsUpdateStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateParticipantStatus(id: string, participantsUpdateStatusDto: ParticipantsUpdateStatusDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateParticipantStatus(id, participantsUpdateStatusDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantsApi.updateParticipantStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ParticipantsApi - factory interface
 * @export
 */
export const ParticipantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParticipantsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add participant to a group
         * @param {string} id Participant ID
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParticipantToGroup(id: string, groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto> {
            return localVarFp.addParticipantToGroup(id, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new participant
         * @param {ParticipantsCreateDto} participantsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParticipant(participantsCreateDto: ParticipantsCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto> {
            return localVarFp.createParticipant(participantsCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a participant
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParticipant(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto> {
            return localVarFp.deleteParticipant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all participants
         * @param {string} [groupId] Filter participants by group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParticipants(groupId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParticipantsResponseDto>> {
            return localVarFp.getAllParticipants(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get participant by ID
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto> {
            return localVarFp.getParticipantById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get participant by phone number
         * @param {string} phoneNumber Participant phone number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantByPhoneNumber(phoneNumber: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto> {
            return localVarFp.getParticipantByPhoneNumber(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the context for a participant including groups and related persons
         * @summary Get participant context
         * @param {string} id Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantContext(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantContextResponseDto> {
            return localVarFp.getParticipantContext(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of participants with group and person counts
         * @summary Query participants with pagination and filtering, including counts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {string} [name] Filter participants by name (case-insensitive partial match)
         * @param {string} [phoneNumber] Filter participants by phone number (partial match)
         * @param {QueryParticipantsWithCountsStatusEnum} [status] Filter participants by status (active/inactive)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryParticipantsWithCounts(page?: number, size?: number, name?: string, phoneNumber?: string, status?: QueryParticipantsWithCountsStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedParticipantsWithCountsResponseDto> {
            return localVarFp.queryParticipantsWithCounts(page, size, name, phoneNumber, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove participant from a group
         * @param {string} id Participant ID
         * @param {string} groupId Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParticipantFromGroup(id: string, groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto> {
            return localVarFp.removeParticipantFromGroup(id, groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a participant
         * @param {string} id Participant ID
         * @param {ParticipantsUpdateDto} participantsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant(id: string, participantsUpdateDto: ParticipantsUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto> {
            return localVarFp.updateParticipant(id, participantsUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update participant status
         * @param {string} id Participant ID
         * @param {ParticipantsUpdateStatusDto} participantsUpdateStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipantStatus(id: string, participantsUpdateStatusDto: ParticipantsUpdateStatusDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto> {
            return localVarFp.updateParticipantStatus(id, participantsUpdateStatusDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParticipantsApi - interface
 * @export
 * @interface ParticipantsApi
 */
export interface ParticipantsApiInterface {
    /**
     * 
     * @summary Add participant to a group
     * @param {string} id Participant ID
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    addParticipantToGroup(id: string, groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto>;

    /**
     * 
     * @summary Create a new participant
     * @param {ParticipantsCreateDto} participantsCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    createParticipant(participantsCreateDto: ParticipantsCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto>;

    /**
     * 
     * @summary Delete a participant
     * @param {string} id Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    deleteParticipant(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto>;

    /**
     * 
     * @summary Get all participants
     * @param {string} [groupId] Filter participants by group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    getAllParticipants(groupId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParticipantsResponseDto>>;

    /**
     * 
     * @summary Get participant by ID
     * @param {string} id Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    getParticipantById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto>;

    /**
     * 
     * @summary Get participant by phone number
     * @param {string} phoneNumber Participant phone number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    getParticipantByPhoneNumber(phoneNumber: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto>;

    /**
     * Get the context for a participant including groups and related persons
     * @summary Get participant context
     * @param {string} id Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    getParticipantContext(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantContextResponseDto>;

    /**
     * Get a paginated list of participants with group and person counts
     * @summary Query participants with pagination and filtering, including counts
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [size] Number of items per page
     * @param {string} [name] Filter participants by name (case-insensitive partial match)
     * @param {string} [phoneNumber] Filter participants by phone number (partial match)
     * @param {QueryParticipantsWithCountsStatusEnum} [status] Filter participants by status (active/inactive)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    queryParticipantsWithCounts(page?: number, size?: number, name?: string, phoneNumber?: string, status?: QueryParticipantsWithCountsStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedParticipantsWithCountsResponseDto>;

    /**
     * 
     * @summary Remove participant from a group
     * @param {string} id Participant ID
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    removeParticipantFromGroup(id: string, groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto>;

    /**
     * 
     * @summary Update a participant
     * @param {string} id Participant ID
     * @param {ParticipantsUpdateDto} participantsUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    updateParticipant(id: string, participantsUpdateDto: ParticipantsUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto>;

    /**
     * 
     * @summary Update participant status
     * @param {string} id Participant ID
     * @param {ParticipantsUpdateStatusDto} participantsUpdateStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    updateParticipantStatus(id: string, participantsUpdateStatusDto: ParticipantsUpdateStatusDto, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantsResponseDto>;

}

/**
 * ParticipantsApi - object-oriented interface
 * @export
 * @class ParticipantsApi
 * @extends {BaseAPI}
 */
export class ParticipantsApi extends BaseAPI implements ParticipantsApiInterface {
    /**
     * 
     * @summary Add participant to a group
     * @param {string} id Participant ID
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public addParticipantToGroup(id: string, groupId: string, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).addParticipantToGroup(id, groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new participant
     * @param {ParticipantsCreateDto} participantsCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public createParticipant(participantsCreateDto: ParticipantsCreateDto, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).createParticipant(participantsCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a participant
     * @param {string} id Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public deleteParticipant(id: string, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).deleteParticipant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all participants
     * @param {string} [groupId] Filter participants by group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public getAllParticipants(groupId?: string, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).getAllParticipants(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get participant by ID
     * @param {string} id Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public getParticipantById(id: string, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).getParticipantById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get participant by phone number
     * @param {string} phoneNumber Participant phone number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public getParticipantByPhoneNumber(phoneNumber: string, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).getParticipantByPhoneNumber(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the context for a participant including groups and related persons
     * @summary Get participant context
     * @param {string} id Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public getParticipantContext(id: string, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).getParticipantContext(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of participants with group and person counts
     * @summary Query participants with pagination and filtering, including counts
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [size] Number of items per page
     * @param {string} [name] Filter participants by name (case-insensitive partial match)
     * @param {string} [phoneNumber] Filter participants by phone number (partial match)
     * @param {QueryParticipantsWithCountsStatusEnum} [status] Filter participants by status (active/inactive)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public queryParticipantsWithCounts(page?: number, size?: number, name?: string, phoneNumber?: string, status?: QueryParticipantsWithCountsStatusEnum, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).queryParticipantsWithCounts(page, size, name, phoneNumber, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove participant from a group
     * @param {string} id Participant ID
     * @param {string} groupId Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public removeParticipantFromGroup(id: string, groupId: string, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).removeParticipantFromGroup(id, groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a participant
     * @param {string} id Participant ID
     * @param {ParticipantsUpdateDto} participantsUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public updateParticipant(id: string, participantsUpdateDto: ParticipantsUpdateDto, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).updateParticipant(id, participantsUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update participant status
     * @param {string} id Participant ID
     * @param {ParticipantsUpdateStatusDto} participantsUpdateStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApi
     */
    public updateParticipantStatus(id: string, participantsUpdateStatusDto: ParticipantsUpdateStatusDto, options?: RawAxiosRequestConfig) {
        return ParticipantsApiFp(this.configuration).updateParticipantStatus(id, participantsUpdateStatusDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const QueryParticipantsWithCountsStatusEnum = {
    Active: 'active',
    Inactive: 'inactive'
} as const;
export type QueryParticipantsWithCountsStatusEnum = typeof QueryParticipantsWithCountsStatusEnum[keyof typeof QueryParticipantsWithCountsStatusEnum];
