/* tslint:disable */
/* eslint-disable */
/**
 * Shula API
 * API documentation for the Shula application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateSystemMessageDto } from '../models';
// @ts-ignore
import type { RenderSystemMessageDto } from '../models';
// @ts-ignore
import type { SystemMessageResponseDto } from '../models';
// @ts-ignore
import type { UpdateSystemMessageDto } from '../models';
/**
 * SystemMessagesApi - axios parameter creator
 * @export
 */
export const SystemMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new system message with the provided data
         * @summary Create a new system message
         * @param {CreateSystemMessageDto} createSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystemMessage: async (createSystemMessageDto: CreateSystemMessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSystemMessageDto' is not null or undefined
            assertParamExists('createSystemMessage', 'createSystemMessageDto', createSystemMessageDto)
            const localVarPath = `/api/v1/system-messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSystemMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a system message as deleted
         * @summary Delete a system message
         * @param {string} id System message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystemMessage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSystemMessage', 'id', id)
            const localVarPath = `/api/v1/system-messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all active system messages
         * @summary Get all system messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSystemMessages: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/system-messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a system message by its unique identifier
         * @summary Get a system message by ID
         * @param {string} id System message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMessageById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSystemMessageById', 'id', id)
            const localVarPath = `/api/v1/system-messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Renders a system message by replacing placeholders with provided parameters
         * @summary Render a system message
         * @param {RenderSystemMessageDto} renderSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderSystemMessage: async (renderSystemMessageDto: RenderSystemMessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'renderSystemMessageDto' is not null or undefined
            assertParamExists('renderSystemMessage', 'renderSystemMessageDto', renderSystemMessageDto)
            const localVarPath = `/api/v1/system-messages/render`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(renderSystemMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing system message with the provided data
         * @summary Update a system message
         * @param {string} id System message ID
         * @param {UpdateSystemMessageDto} updateSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSystemMessage: async (id: string, updateSystemMessageDto: UpdateSystemMessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSystemMessage', 'id', id)
            // verify required parameter 'updateSystemMessageDto' is not null or undefined
            assertParamExists('updateSystemMessage', 'updateSystemMessageDto', updateSystemMessageDto)
            const localVarPath = `/api/v1/system-messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSystemMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemMessagesApi - functional programming interface
 * @export
 */
export const SystemMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new system message with the provided data
         * @summary Create a new system message
         * @param {CreateSystemMessageDto} createSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSystemMessage(createSystemMessageDto: CreateSystemMessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemMessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSystemMessage(createSystemMessageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemMessagesApi.createSystemMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks a system message as deleted
         * @summary Delete a system message
         * @param {string} id System message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSystemMessage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSystemMessage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemMessagesApi.deleteSystemMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all active system messages
         * @summary Get all system messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSystemMessages(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SystemMessageResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSystemMessages(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemMessagesApi.getAllSystemMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a system message by its unique identifier
         * @summary Get a system message by ID
         * @param {string} id System message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemMessageById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemMessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemMessageById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemMessagesApi.getSystemMessageById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Renders a system message by replacing placeholders with provided parameters
         * @summary Render a system message
         * @param {RenderSystemMessageDto} renderSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renderSystemMessage(renderSystemMessageDto: RenderSystemMessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemMessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.renderSystemMessage(renderSystemMessageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemMessagesApi.renderSystemMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an existing system message with the provided data
         * @summary Update a system message
         * @param {string} id System message ID
         * @param {UpdateSystemMessageDto} updateSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSystemMessage(id: string, updateSystemMessageDto: UpdateSystemMessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemMessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSystemMessage(id, updateSystemMessageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemMessagesApi.updateSystemMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemMessagesApi - factory interface
 * @export
 */
export const SystemMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemMessagesApiFp(configuration)
    return {
        /**
         * Creates a new system message with the provided data
         * @summary Create a new system message
         * @param {CreateSystemMessageDto} createSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystemMessage(createSystemMessageDto: CreateSystemMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<SystemMessageResponseDto> {
            return localVarFp.createSystemMessage(createSystemMessageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a system message as deleted
         * @summary Delete a system message
         * @param {string} id System message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystemMessage(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSystemMessage(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all active system messages
         * @summary Get all system messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSystemMessages(options?: RawAxiosRequestConfig): AxiosPromise<Array<SystemMessageResponseDto>> {
            return localVarFp.getAllSystemMessages(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a system message by its unique identifier
         * @summary Get a system message by ID
         * @param {string} id System message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMessageById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SystemMessageResponseDto> {
            return localVarFp.getSystemMessageById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Renders a system message by replacing placeholders with provided parameters
         * @summary Render a system message
         * @param {RenderSystemMessageDto} renderSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderSystemMessage(renderSystemMessageDto: RenderSystemMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<SystemMessageResponseDto> {
            return localVarFp.renderSystemMessage(renderSystemMessageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing system message with the provided data
         * @summary Update a system message
         * @param {string} id System message ID
         * @param {UpdateSystemMessageDto} updateSystemMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSystemMessage(id: string, updateSystemMessageDto: UpdateSystemMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<SystemMessageResponseDto> {
            return localVarFp.updateSystemMessage(id, updateSystemMessageDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemMessagesApi - interface
 * @export
 * @interface SystemMessagesApi
 */
export interface SystemMessagesApiInterface {
    /**
     * Creates a new system message with the provided data
     * @summary Create a new system message
     * @param {CreateSystemMessageDto} createSystemMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApiInterface
     */
    createSystemMessage(createSystemMessageDto: CreateSystemMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<SystemMessageResponseDto>;

    /**
     * Marks a system message as deleted
     * @summary Delete a system message
     * @param {string} id System message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApiInterface
     */
    deleteSystemMessage(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves all active system messages
     * @summary Get all system messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApiInterface
     */
    getAllSystemMessages(options?: RawAxiosRequestConfig): AxiosPromise<Array<SystemMessageResponseDto>>;

    /**
     * Retrieves a system message by its unique identifier
     * @summary Get a system message by ID
     * @param {string} id System message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApiInterface
     */
    getSystemMessageById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SystemMessageResponseDto>;

    /**
     * Renders a system message by replacing placeholders with provided parameters
     * @summary Render a system message
     * @param {RenderSystemMessageDto} renderSystemMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApiInterface
     */
    renderSystemMessage(renderSystemMessageDto: RenderSystemMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<SystemMessageResponseDto>;

    /**
     * Updates an existing system message with the provided data
     * @summary Update a system message
     * @param {string} id System message ID
     * @param {UpdateSystemMessageDto} updateSystemMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApiInterface
     */
    updateSystemMessage(id: string, updateSystemMessageDto: UpdateSystemMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<SystemMessageResponseDto>;

}

/**
 * SystemMessagesApi - object-oriented interface
 * @export
 * @class SystemMessagesApi
 * @extends {BaseAPI}
 */
export class SystemMessagesApi extends BaseAPI implements SystemMessagesApiInterface {
    /**
     * Creates a new system message with the provided data
     * @summary Create a new system message
     * @param {CreateSystemMessageDto} createSystemMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApi
     */
    public createSystemMessage(createSystemMessageDto: CreateSystemMessageDto, options?: RawAxiosRequestConfig) {
        return SystemMessagesApiFp(this.configuration).createSystemMessage(createSystemMessageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a system message as deleted
     * @summary Delete a system message
     * @param {string} id System message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApi
     */
    public deleteSystemMessage(id: string, options?: RawAxiosRequestConfig) {
        return SystemMessagesApiFp(this.configuration).deleteSystemMessage(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all active system messages
     * @summary Get all system messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApi
     */
    public getAllSystemMessages(options?: RawAxiosRequestConfig) {
        return SystemMessagesApiFp(this.configuration).getAllSystemMessages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a system message by its unique identifier
     * @summary Get a system message by ID
     * @param {string} id System message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApi
     */
    public getSystemMessageById(id: string, options?: RawAxiosRequestConfig) {
        return SystemMessagesApiFp(this.configuration).getSystemMessageById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Renders a system message by replacing placeholders with provided parameters
     * @summary Render a system message
     * @param {RenderSystemMessageDto} renderSystemMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApi
     */
    public renderSystemMessage(renderSystemMessageDto: RenderSystemMessageDto, options?: RawAxiosRequestConfig) {
        return SystemMessagesApiFp(this.configuration).renderSystemMessage(renderSystemMessageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing system message with the provided data
     * @summary Update a system message
     * @param {string} id System message ID
     * @param {UpdateSystemMessageDto} updateSystemMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMessagesApi
     */
    public updateSystemMessage(id: string, updateSystemMessageDto: UpdateSystemMessageDto, options?: RawAxiosRequestConfig) {
        return SystemMessagesApiFp(this.configuration).updateSystemMessage(id, updateSystemMessageDto, options).then((request) => request(this.axios, this.basePath));
    }
}

