/* tslint:disable */
/* eslint-disable */
/**
 * Shula API
 * API documentation for the Shula application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IndexPersonFace200Response } from '../models';
// @ts-ignore
import type { PersonsCreateDto } from '../models';
// @ts-ignore
import type { PersonsFaceIndexDto } from '../models';
// @ts-ignore
import type { PersonsResponseDto } from '../models';
// @ts-ignore
import type { PersonsUpdateDto } from '../models';
/**
 * PersonsApi - axios parameter creator
 * @export
 */
export const PersonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {PersonsCreateDto} personsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson: async (xParticipantId: string, personsCreateDto: PersonsCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xParticipantId' is not null or undefined
            assertParamExists('createPerson', 'xParticipantId', xParticipantId)
            // verify required parameter 'personsCreateDto' is not null or undefined
            assertParamExists('createPerson', 'personsCreateDto', personsCreateDto)
            const localVarPath = `/api/v1/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xParticipantId != null) {
                localVarHeaderParameter['x-participant-id'] = String(xParticipantId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personsCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson: async (xParticipantId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xParticipantId' is not null or undefined
            assertParamExists('deletePerson', 'xParticipantId', xParticipantId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePerson', 'id', id)
            const localVarPath = `/api/v1/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (xParticipantId != null) {
                localVarHeaderParameter['x-participant-id'] = String(xParticipantId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a person by ID
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById: async (xParticipantId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xParticipantId' is not null or undefined
            assertParamExists('getPersonById', 'xParticipantId', xParticipantId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPersonById', 'id', id)
            const localVarPath = `/api/v1/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (xParticipantId != null) {
                localVarHeaderParameter['x-participant-id'] = String(xParticipantId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index a person\'s face using AWS Rekognition
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {PersonsFaceIndexDto} personsFaceIndexDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexPersonFace: async (xParticipantId: string, id: string, personsFaceIndexDto: PersonsFaceIndexDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xParticipantId' is not null or undefined
            assertParamExists('indexPersonFace', 'xParticipantId', xParticipantId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('indexPersonFace', 'id', id)
            // verify required parameter 'personsFaceIndexDto' is not null or undefined
            assertParamExists('indexPersonFace', 'personsFaceIndexDto', personsFaceIndexDto)
            const localVarPath = `/api/v1/persons/{id}/face`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xParticipantId != null) {
                localVarHeaderParameter['x-participant-id'] = String(xParticipantId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personsFaceIndexDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all persons
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [participantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFindAll: async (xParticipantId: string, page?: number, size?: number, participantId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xParticipantId' is not null or undefined
            assertParamExists('personsControllerFindAll', 'xParticipantId', xParticipantId)
            const localVarPath = `/api/v1/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (participantId !== undefined) {
                localVarQueryParameter['participantId'] = participantId;
            }


    
            if (xParticipantId != null) {
                localVarHeaderParameter['x-participant-id'] = String(xParticipantId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all persons associated with a participant
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Participant ID
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFindByParticipant: async (xParticipantId: string, id: string, size?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xParticipantId' is not null or undefined
            assertParamExists('personsControllerFindByParticipant', 'xParticipantId', xParticipantId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('personsControllerFindByParticipant', 'id', id)
            const localVarPath = `/api/v1/persons/by-participant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            if (xParticipantId != null) {
                localVarHeaderParameter['x-participant-id'] = String(xParticipantId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {PersonsUpdateDto} personsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson: async (xParticipantId: string, id: string, personsUpdateDto: PersonsUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xParticipantId' is not null or undefined
            assertParamExists('updatePerson', 'xParticipantId', xParticipantId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePerson', 'id', id)
            // verify required parameter 'personsUpdateDto' is not null or undefined
            assertParamExists('updatePerson', 'personsUpdateDto', personsUpdateDto)
            const localVarPath = `/api/v1/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xParticipantId != null) {
                localVarHeaderParameter['x-participant-id'] = String(xParticipantId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personsUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonsApi - functional programming interface
 * @export
 */
export const PersonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {PersonsCreateDto} personsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPerson(xParticipantId: string, personsCreateDto: PersonsCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(xParticipantId, personsCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.createPerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePerson(xParticipantId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePerson(xParticipantId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.deletePerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a person by ID
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonById(xParticipantId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonById(xParticipantId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.getPersonById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Index a person\'s face using AWS Rekognition
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {PersonsFaceIndexDto} personsFaceIndexDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexPersonFace(xParticipantId: string, id: string, personsFaceIndexDto: PersonsFaceIndexDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexPersonFace200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexPersonFace(xParticipantId, id, personsFaceIndexDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.indexPersonFace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all persons
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [participantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personsControllerFindAll(xParticipantId: string, page?: number, size?: number, participantId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonsResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personsControllerFindAll(xParticipantId, page, size, participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.personsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all persons associated with a participant
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Participant ID
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personsControllerFindByParticipant(xParticipantId: string, id: string, size?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonsResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personsControllerFindByParticipant(xParticipantId, id, size, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.personsControllerFindByParticipant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {PersonsUpdateDto} personsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePerson(xParticipantId: string, id: string, personsUpdateDto: PersonsUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePerson(xParticipantId, id, personsUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonsApi.updatePerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PersonsApi - factory interface
 * @export
 */
export const PersonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {PersonsCreateDto} personsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson(xParticipantId: string, personsCreateDto: PersonsCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<PersonsResponseDto> {
            return localVarFp.createPerson(xParticipantId, personsCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson(xParticipantId: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePerson(xParticipantId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a person by ID
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById(xParticipantId: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<PersonsResponseDto> {
            return localVarFp.getPersonById(xParticipantId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index a person\'s face using AWS Rekognition
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {PersonsFaceIndexDto} personsFaceIndexDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexPersonFace(xParticipantId: string, id: string, personsFaceIndexDto: PersonsFaceIndexDto, options?: RawAxiosRequestConfig): AxiosPromise<IndexPersonFace200Response> {
            return localVarFp.indexPersonFace(xParticipantId, id, personsFaceIndexDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all persons
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [participantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFindAll(xParticipantId: string, page?: number, size?: number, participantId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PersonsResponseDto>> {
            return localVarFp.personsControllerFindAll(xParticipantId, page, size, participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all persons associated with a participant
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Participant ID
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFindByParticipant(xParticipantId: string, id: string, size?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PersonsResponseDto>> {
            return localVarFp.personsControllerFindByParticipant(xParticipantId, id, size, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a person
         * @param {string} xParticipantId Unique identifier for the participant
         * @param {string} id Person ID
         * @param {PersonsUpdateDto} personsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson(xParticipantId: string, id: string, personsUpdateDto: PersonsUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<PersonsResponseDto> {
            return localVarFp.updatePerson(xParticipantId, id, personsUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonsApi - interface
 * @export
 * @interface PersonsApi
 */
export interface PersonsApiInterface {
    /**
     * 
     * @summary Create a new person
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {PersonsCreateDto} personsCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    createPerson(xParticipantId: string, personsCreateDto: PersonsCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<PersonsResponseDto>;

    /**
     * 
     * @summary Delete a person
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Person ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    deletePerson(xParticipantId: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get a person by ID
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Person ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonById(xParticipantId: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<PersonsResponseDto>;

    /**
     * 
     * @summary Index a person\'s face using AWS Rekognition
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Person ID
     * @param {PersonsFaceIndexDto} personsFaceIndexDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    indexPersonFace(xParticipantId: string, id: string, personsFaceIndexDto: PersonsFaceIndexDto, options?: RawAxiosRequestConfig): AxiosPromise<IndexPersonFace200Response>;

    /**
     * 
     * @summary Get all persons
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [participantId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    personsControllerFindAll(xParticipantId: string, page?: number, size?: number, participantId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<PersonsResponseDto>>;

    /**
     * 
     * @summary Get all persons associated with a participant
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Participant ID
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    personsControllerFindByParticipant(xParticipantId: string, id: string, size?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PersonsResponseDto>>;

    /**
     * 
     * @summary Update a person
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Person ID
     * @param {PersonsUpdateDto} personsUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    updatePerson(xParticipantId: string, id: string, personsUpdateDto: PersonsUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<PersonsResponseDto>;

}

/**
 * PersonsApi - object-oriented interface
 * @export
 * @class PersonsApi
 * @extends {BaseAPI}
 */
export class PersonsApi extends BaseAPI implements PersonsApiInterface {
    /**
     * 
     * @summary Create a new person
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {PersonsCreateDto} personsCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public createPerson(xParticipantId: string, personsCreateDto: PersonsCreateDto, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).createPerson(xParticipantId, personsCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a person
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Person ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public deletePerson(xParticipantId: string, id: string, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).deletePerson(xParticipantId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a person by ID
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Person ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public getPersonById(xParticipantId: string, id: string, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).getPersonById(xParticipantId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index a person\'s face using AWS Rekognition
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Person ID
     * @param {PersonsFaceIndexDto} personsFaceIndexDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public indexPersonFace(xParticipantId: string, id: string, personsFaceIndexDto: PersonsFaceIndexDto, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).indexPersonFace(xParticipantId, id, personsFaceIndexDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all persons
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [participantId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public personsControllerFindAll(xParticipantId: string, page?: number, size?: number, participantId?: string, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).personsControllerFindAll(xParticipantId, page, size, participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all persons associated with a participant
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Participant ID
     * @param {number} [size] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public personsControllerFindByParticipant(xParticipantId: string, id: string, size?: number, page?: number, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).personsControllerFindByParticipant(xParticipantId, id, size, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a person
     * @param {string} xParticipantId Unique identifier for the participant
     * @param {string} id Person ID
     * @param {PersonsUpdateDto} personsUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApi
     */
    public updatePerson(xParticipantId: string, id: string, personsUpdateDto: PersonsUpdateDto, options?: RawAxiosRequestConfig) {
        return PersonsApiFp(this.configuration).updatePerson(xParticipantId, id, personsUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}

