/* tslint:disable */
/* eslint-disable */
/**
 * Shula API
 * API documentation for the Shula application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConsentMessageDto } from '../models';
// @ts-ignore
import type { GroupStatsResponseDto } from '../models';
// @ts-ignore
import type { GroupWithCountsResponseDto } from '../models';
// @ts-ignore
import type { GroupsCreateDto } from '../models';
// @ts-ignore
import type { GroupsQueryDto } from '../models';
// @ts-ignore
import type { GroupsResponseDto } from '../models';
// @ts-ignore
import type { GroupsUpdateDto } from '../models';
// @ts-ignore
import type { PaginatedGroupsResponseDto } from '../models';
// @ts-ignore
import type { PaginatedGroupsWithCountsResponseDto } from '../models';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activate a specific group by ID
         * @summary Activate a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateGroup: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activateGroup', 'id', id)
            const localVarPath = `/api/v1/groups/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new WhatsApp group
         * @summary Create a new group
         * @param {GroupsCreateDto} groupsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (groupsCreateDto: GroupsCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupsCreateDto' is not null or undefined
            assertParamExists('createGroup', 'groupsCreateDto', groupsCreateDto)
            const localVarPath = `/api/v1/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupsCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deactivate a specific group by ID
         * @summary Deactivate a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateGroup: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deactivateGroup', 'id', id)
            const localVarPath = `/api/v1/groups/{id}/deactivate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific group by ID
         * @summary Delete a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGroup', 'id', id)
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all WhatsApp groups
         * @summary List all groups
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroups: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all WhatsApp groups with participant and person counts
         * @summary List all groups with participant and person counts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {number} [minParticipants] Minimum number of participants
         * @param {number} [maxParticipants] Maximum number of participants
         * @param {string} [name] Filter groups by name (case-insensitive partial match)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupsWithCounts: async (page?: number, size?: number, minParticipants?: number, maxParticipants?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/groups/with-counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (minParticipants !== undefined) {
                localVarQueryParameter['minParticipants'] = minParticipants;
            }

            if (maxParticipants !== undefined) {
                localVarQueryParameter['maxParticipants'] = maxParticipants;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific group by ID
         * @summary Get group details
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupById', 'id', id)
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve statistics about groups like active/inactive counts
         * @summary Get group statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/groups/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific group by ID including participant and person counts
         * @summary Get group with participant and person counts
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupWithCountsById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupWithCountsById', 'id', id)
            const localVarPath = `/api/v1/groups/{id}/counts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query groups with pagination and filters
         * @summary Query groups with filters
         * @param {GroupsQueryDto} groupsQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryGroups: async (groupsQueryDto: GroupsQueryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupsQueryDto' is not null or undefined
            assertParamExists('queryGroups', 'groupsQueryDto', groupsQueryDto)
            const localVarPath = `/api/v1/groups/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupsQueryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the consent message ID for a group
         * @summary Update consent message ID
         * @param {ConsentMessageDto} consentMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsentMessageId: async (consentMessageDto: ConsentMessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentMessageDto' is not null or undefined
            assertParamExists('updateConsentMessageId', 'consentMessageDto', consentMessageDto)
            const localVarPath = `/api/v1/groups/consent-message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(consentMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update details of a specific group by ID
         * @summary Update group details
         * @param {string} id Group ID
         * @param {GroupsUpdateDto} groupsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (id: string, groupsUpdateDto: GroupsUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroup', 'id', id)
            // verify required parameter 'groupsUpdateDto' is not null or undefined
            assertParamExists('updateGroup', 'groupsUpdateDto', groupsUpdateDto)
            const localVarPath = `/api/v1/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupsUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Activate a specific group by ID
         * @summary Activate a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateGroup(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateGroup(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.activateGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new WhatsApp group
         * @summary Create a new group
         * @param {GroupsCreateDto} groupsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(groupsCreateDto: GroupsCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(groupsCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.createGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deactivate a specific group by ID
         * @summary Deactivate a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateGroup(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateGroup(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.deactivateGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific group by ID
         * @summary Delete a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.deleteGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all WhatsApp groups
         * @summary List all groups
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGroups(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGroupsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGroups(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getAllGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all WhatsApp groups with participant and person counts
         * @summary List all groups with participant and person counts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {number} [minParticipants] Minimum number of participants
         * @param {number} [maxParticipants] Maximum number of participants
         * @param {string} [name] Filter groups by name (case-insensitive partial match)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGroupsWithCounts(page?: number, size?: number, minParticipants?: number, maxParticipants?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGroupsWithCountsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGroupsWithCounts(page, size, minParticipants, maxParticipants, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getAllGroupsWithCounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details of a specific group by ID
         * @summary Get group details
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getGroupById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve statistics about groups like active/inactive counts
         * @summary Get group statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupStatsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getGroupStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details of a specific group by ID including participant and person counts
         * @summary Get group with participant and person counts
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupWithCountsById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupWithCountsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupWithCountsById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getGroupWithCountsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Query groups with pagination and filters
         * @summary Query groups with filters
         * @param {GroupsQueryDto} groupsQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryGroups(groupsQueryDto: GroupsQueryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGroupsWithCountsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryGroups(groupsQueryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.queryGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the consent message ID for a group
         * @summary Update consent message ID
         * @param {ConsentMessageDto} consentMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConsentMessageId(consentMessageDto: ConsentMessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConsentMessageId(consentMessageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.updateConsentMessageId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update details of a specific group by ID
         * @summary Update group details
         * @param {string} id Group ID
         * @param {GroupsUpdateDto} groupsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(id: string, groupsUpdateDto: GroupsUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(id, groupsUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.updateGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * Activate a specific group by ID
         * @summary Activate a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateGroup(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto> {
            return localVarFp.activateGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new WhatsApp group
         * @summary Create a new group
         * @param {GroupsCreateDto} groupsCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(groupsCreateDto: GroupsCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto> {
            return localVarFp.createGroup(groupsCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Deactivate a specific group by ID
         * @summary Deactivate a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateGroup(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto> {
            return localVarFp.deactivateGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific group by ID
         * @summary Delete a group
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all WhatsApp groups
         * @summary List all groups
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroups(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedGroupsResponseDto> {
            return localVarFp.getAllGroups(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all WhatsApp groups with participant and person counts
         * @summary List all groups with participant and person counts
         * @param {number} [page] Page number (1-indexed)
         * @param {number} [size] Number of items per page
         * @param {number} [minParticipants] Minimum number of participants
         * @param {number} [maxParticipants] Maximum number of participants
         * @param {string} [name] Filter groups by name (case-insensitive partial match)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupsWithCounts(page?: number, size?: number, minParticipants?: number, maxParticipants?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedGroupsWithCountsResponseDto> {
            return localVarFp.getAllGroupsWithCounts(page, size, minParticipants, maxParticipants, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific group by ID
         * @summary Get group details
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto> {
            return localVarFp.getGroupById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve statistics about groups like active/inactive counts
         * @summary Get group statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupStats(options?: RawAxiosRequestConfig): AxiosPromise<GroupStatsResponseDto> {
            return localVarFp.getGroupStats(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific group by ID including participant and person counts
         * @summary Get group with participant and person counts
         * @param {string} id Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupWithCountsById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupWithCountsResponseDto> {
            return localVarFp.getGroupWithCountsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Query groups with pagination and filters
         * @summary Query groups with filters
         * @param {GroupsQueryDto} groupsQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryGroups(groupsQueryDto: GroupsQueryDto, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedGroupsWithCountsResponseDto> {
            return localVarFp.queryGroups(groupsQueryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the consent message ID for a group
         * @summary Update consent message ID
         * @param {ConsentMessageDto} consentMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsentMessageId(consentMessageDto: ConsentMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto> {
            return localVarFp.updateConsentMessageId(consentMessageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update details of a specific group by ID
         * @summary Update group details
         * @param {string} id Group ID
         * @param {GroupsUpdateDto} groupsUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(id: string, groupsUpdateDto: GroupsUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto> {
            return localVarFp.updateGroup(id, groupsUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - interface
 * @export
 * @interface GroupsApi
 */
export interface GroupsApiInterface {
    /**
     * Activate a specific group by ID
     * @summary Activate a group
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    activateGroup(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto>;

    /**
     * Create a new WhatsApp group
     * @summary Create a new group
     * @param {GroupsCreateDto} groupsCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    createGroup(groupsCreateDto: GroupsCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto>;

    /**
     * Deactivate a specific group by ID
     * @summary Deactivate a group
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    deactivateGroup(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto>;

    /**
     * Delete a specific group by ID
     * @summary Delete a group
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    deleteGroup(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve a list of all WhatsApp groups
     * @summary List all groups
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [size] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getAllGroups(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedGroupsResponseDto>;

    /**
     * Retrieve a list of all WhatsApp groups with participant and person counts
     * @summary List all groups with participant and person counts
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [size] Number of items per page
     * @param {number} [minParticipants] Minimum number of participants
     * @param {number} [maxParticipants] Maximum number of participants
     * @param {string} [name] Filter groups by name (case-insensitive partial match)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getAllGroupsWithCounts(page?: number, size?: number, minParticipants?: number, maxParticipants?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedGroupsWithCountsResponseDto>;

    /**
     * Retrieve details of a specific group by ID
     * @summary Get group details
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getGroupById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto>;

    /**
     * Retrieve statistics about groups like active/inactive counts
     * @summary Get group statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getGroupStats(options?: RawAxiosRequestConfig): AxiosPromise<GroupStatsResponseDto>;

    /**
     * Retrieve details of a specific group by ID including participant and person counts
     * @summary Get group with participant and person counts
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getGroupWithCountsById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GroupWithCountsResponseDto>;

    /**
     * Query groups with pagination and filters
     * @summary Query groups with filters
     * @param {GroupsQueryDto} groupsQueryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    queryGroups(groupsQueryDto: GroupsQueryDto, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedGroupsWithCountsResponseDto>;

    /**
     * Update the consent message ID for a group
     * @summary Update consent message ID
     * @param {ConsentMessageDto} consentMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    updateConsentMessageId(consentMessageDto: ConsentMessageDto, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto>;

    /**
     * Update details of a specific group by ID
     * @summary Update group details
     * @param {string} id Group ID
     * @param {GroupsUpdateDto} groupsUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    updateGroup(id: string, groupsUpdateDto: GroupsUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<GroupsResponseDto>;

}

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI implements GroupsApiInterface {
    /**
     * Activate a specific group by ID
     * @summary Activate a group
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public activateGroup(id: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).activateGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new WhatsApp group
     * @summary Create a new group
     * @param {GroupsCreateDto} groupsCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroup(groupsCreateDto: GroupsCreateDto, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroup(groupsCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deactivate a specific group by ID
     * @summary Deactivate a group
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deactivateGroup(id: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deactivateGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific group by ID
     * @summary Delete a group
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroup(id: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all WhatsApp groups
     * @summary List all groups
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [size] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getAllGroups(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getAllGroups(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all WhatsApp groups with participant and person counts
     * @summary List all groups with participant and person counts
     * @param {number} [page] Page number (1-indexed)
     * @param {number} [size] Number of items per page
     * @param {number} [minParticipants] Minimum number of participants
     * @param {number} [maxParticipants] Maximum number of participants
     * @param {string} [name] Filter groups by name (case-insensitive partial match)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getAllGroupsWithCounts(page?: number, size?: number, minParticipants?: number, maxParticipants?: number, name?: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getAllGroupsWithCounts(page, size, minParticipants, maxParticipants, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of a specific group by ID
     * @summary Get group details
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupById(id: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve statistics about groups like active/inactive counts
     * @summary Get group statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupStats(options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of a specific group by ID including participant and person counts
     * @summary Get group with participant and person counts
     * @param {string} id Group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupWithCountsById(id: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupWithCountsById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query groups with pagination and filters
     * @summary Query groups with filters
     * @param {GroupsQueryDto} groupsQueryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public queryGroups(groupsQueryDto: GroupsQueryDto, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).queryGroups(groupsQueryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the consent message ID for a group
     * @summary Update consent message ID
     * @param {ConsentMessageDto} consentMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateConsentMessageId(consentMessageDto: ConsentMessageDto, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateConsentMessageId(consentMessageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update details of a specific group by ID
     * @summary Update group details
     * @param {string} id Group ID
     * @param {GroupsUpdateDto} groupsUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroup(id: string, groupsUpdateDto: GroupsUpdateDto, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroup(id, groupsUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}

